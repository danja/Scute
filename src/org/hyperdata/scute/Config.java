/**
 * 
 * singleton object - more statics can be pulled out?
 */
package org.hyperdata.scute;

import java.io.IOException;

import org.hyperdata.scute.io.ModelSaver;
import org.hyperdata.scute.rdf.ModelContainer;
import org.hyperdata.scute.rdf.RdfUtils;

import com.hp.hpl.jena.rdf.model.Literal;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.Resource;

/**
 * @author danny
 * 
 */
public class Config implements ModelContainer {

	// set in code
	public static final String ASSEMBLER_FILENAME = "data/tdb-assembler.ttl";
	public static final String CONFIG_FILENAME = "data/config.ttl";
	public static final String WORKING_MODEL_FILENAME = "data/default.ttl";
	public static final String TEXT_FILENAME = "data/temp.txt";
	public static String baseUri = "http://purl.org/stuff/swib/";
	public static Resource swibResource;
	public static Model model;
	static {
		model = ModelFactory.createDefaultModel();
		swibResource = model
				.createResource("http://purl.org/stuff/swib/application");
	}

	// system until clean shutdown
	private static boolean loaded = false;
	private static String CONFIG_FORMAT = "Turtle";
	public static Config self = new Config(); // seems a good name for a

	// singleton

	private Config() {
	}

	// only for bootstrapping, sets & saves default values
	public static void main(String[] args) {
		// Config config = new Config();
		self.setDefaults();
		self.saveNow();
	}

	public void setDefaults() {
		setValue("defaultFileFormat", "Turtle");
		setValue("modelSaveDelay", "2000");
		setValue("modelSavePeriod", "6000");
		setValue("textSaveDelay", "4000");
		setValue("textSavePeriod", "6000");
		setValue("sync", "true");
		setValue("selectedTab", "0");
	}

	public String getValue(String propName) {
		if (!loaded) {
			loaded = true;
			load();
		}
		Property property = model.createProperty(baseUri + propName);
		Literal valueNode = model.getRequiredProperty(swibResource, property)
				.getLiteral();
		System.out.println("getting value " + propName + " = "
				+ valueNode.getString());
		return valueNode.getString();
	}

	public void setValue(String propName, String value) {
		System.out.println("setting value " + propName + " = " + value);
		Property property = model.createProperty(baseUri + propName);
		Literal valueNode = model.createLiteral(value);
		swibResource.removeAll(property);
		swibResource.addProperty(property, valueNode);
	}

	public String getIdentifyingComment(String syntax) {
		if (syntax.equals("RDF/XML"))
			return "<!-- RDF/XML Syntax (autogenerated - leave this line intact) -->\n\n";
		return "# Turtle Syntax (autogenerated - leave this line intact)\n\n";
	}

	// is needed?
	public void saveSoon() {
		Thread t = new Thread(new ModelSaver(this));
		t.start(); // Start the thread
	}

	public void saveNow() {
		System.out.println("saving config");
		(new ModelSaver(this)).save();
	}

	public void load() {
		try {
			RdfUtils.load(model, CONFIG_FILENAME, CONFIG_FORMAT);
		} catch (IOException e) {
			// do error popup
			System.out.println("WOOF");
			e.printStackTrace();
			System.exit(1);
		}
	}

	// ///////////////////////////////
	// accessors for hardcoded values

	@Override
	public Model getModel() {
		return model;
	}

	@Override
	public String getModelFilename() {
		return CONFIG_FILENAME;
	}

	// /////////////////////////////////////
	// accessor methods for Config.model

	public String getDefaultFileFormat() {
		return getValue("defaultFileFormat");
	}

	public long getModelSaveDelay() {
		return Long.parseLong(getValue("modelSaveDelay"));
	}

	public long getModelSavePeriod() {
		return Long.parseLong(getValue("modelSavePeriod"));
	}

	public long getTextSaveDelay() {
		return Long.parseLong(getValue("textSaveDelay"));
	}

	public long getTextSavePeriod() {
		return Long.parseLong(getValue("textSavePeriod"));
	}

	public boolean getSync() {
		boolean boo = Boolean.parseBoolean(getValue("sync"));
		// System.out.println("Boolean.parseBoolean(getValue(sync)); "+boo);
		return boo;
	}

	public void setSync(boolean b) {
		if (b) {
			setValue("sync", "true");
		} else {
			setValue("sync", "false");
		}
	}

	public int getSelectedTab() {
		return Integer.parseInt(getValue("selectedTab"));
	}

	public void setSelectedTab(int tabIndex) {
		System.out.println("Setting tab = " + tabIndex);
		setValue("selectedTab", Integer.toString(tabIndex));
		System.out.println("getting tab = " + getSelectedTab());
	}

	@Override
	public String getModelName() {
		return "config";
	}

}
